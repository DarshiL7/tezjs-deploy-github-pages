const assets = { scripts:{"/assets/index.page.js":"b1ba241c62bb1739ad38d304345fc0e6","/assets/preload-helper.js":"082cc2690ae67f74dac609f32145c9ff","/assets/runtime-core.esm-bundler.js":"2292e25ff78f7d3182246e64bdaa69c2","/assets/tez.js":"917a61f306eccb8d5c2097c809a22ac2","/index/post.js":"39f7b5f0eb8df1f966b25e6002cfc670","/index/pre.js":"37b5530e8a20ce8c18a56776f5ab7b70","/index/preload.js":"a91c47cadfc0f3b733c6f3f1312cd880","/tz.js":"e6031a94dc804dd3e44e45a86353e32b"}, styles:{"/assets/tez.css":"84f6cb543ef65c8598d6f65e5888dd14"}, html:{"/":"ed8a1cd23268642c4b60eb59c16571dc"}, json:{"/payload/index/index.json":"07a583f6514f33f4bd6b7439a60c4f7b","/payload/index/tags.json":"99914b932bd37a50b983c5e7c90ae93b"} }; async function deleteCache(request, cacheResponse) { const cache = await caches.open(getCacheName(request)); const keys = await cache.keys(); for (var key of keys) { var splitKey = key.url.split("?")[0]; if (splitKey === request.url) { const result = await cache.delete(key); cacheResponse = undefined; break; } } return cacheResponse; } function getRequestHash(request) { var key = request.url.replace(`${self.location.origin}`, ""); var extension = request.url.split(".").pop(); var hashKey = ""; switch (extension) { case "css": hashKey = assets.styles[key]; break; case "js": hashKey = assets.scripts[key]; break; case "json": hashKey = assets.json[key]; break; default: if (request.destination === "image") hashKey = "Image"; else hashKey = assets.html[key]; break; } return hashKey; } const cacheFirstStrategy = async (request) => { var hashKey = getRequestHash(request); var webKey = hashKey ? `?web_key=${hashKey}` : ``; var cacheKey = `${request.url}${webKey}`; var cacheResponse = await caches.match(`${request.url}${webKey}`); if (!cacheResponse) { cacheResponse = await caches.match(cacheKey, { ignoreSearch: true }); if (cacheResponse) cacheResponse = await deleteCache(request, cacheResponse); } else if (!hashKey) cacheResponse = await deleteCache(request,cacheResponse); return cacheResponse || fetchRequestAndCache(request, cacheKey, hashKey); }; const fetchRequestAndCache = async (request, cacheKey, isCache) => { const networkResponse = await fetch(request); const clonedResponse = networkResponse.clone(); const cache = await caches.open(getCacheName(request)); if (isCache) { cache.put(cacheKey, networkResponse); } return clonedResponse; }; const payloadCacheName = "payload_v1"; const assetsCacheName = "assets_v1"; const assetsImageCache = "assets-cache"; const getCacheName = (request) => { var extension = request.url.split(".").pop(); if (extension === "json") return payloadCacheName; else if (request.destination === "image") return assetsImageCache; return assetsCacheName; }; self.addEventListener("message", (e) => { e.data && "SKIP_WAITING" === e.data.type && self.skipWaiting(); }); self.addEventListener("install", async (event) => { self.skipWaiting(); }); self.addEventListener("fetch", (event) => { return event.respondWith(cacheFirstStrategy(event.request)); }); const broadcast = new BroadcastChannel('image-request'); broadcast.onmessage = (event) => { fetch(event.data.url) .then(response => { return response.blob(); }) .then(blob => new Promise((resolve, reject) => { const reader = new FileReader(); reader.onloadend = () => { broadcast.postMessage({ index:event.data.index,url:event.data.url,baseString:reader.result }); resolve(reader.result); }; reader.onerror = reject; reader.readAsDataURL(blob); })) };